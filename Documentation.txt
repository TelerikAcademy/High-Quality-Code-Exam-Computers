Design pattern: Simple Factory
	* In Program class, method CreateComputers is simple factory creating different type of IComputersFactory based on user input

Design pattern: Strategy
	* In Laptop constructor the battery can vary
	* Cpu can work with any IMotherboard components
	* In Computer constructor IRam can vary

Design pattern: Template Method
	* Cpu has method SquareNumber which uses the abstract method GetMaxValue which is implemented in Cpu32, Cpu64 and Cpu128

Design pattern: Abstract factory
	* Introduced IComputersFactory as a base class for HpComputersFactory and DellComputersFactory which creates different type of computers

Design pattern: Composite
	* SingleHardDrive and RaidArray are both HardDrive and RaidArray contains other HardDrives

Design pattern: Mediator
	* Motherboard is mediator for all computer components (e.g. CPU)

Found bottlenecks:
	* 
	* 

Found bugs:
	* When invalid command name is given the program does not output message "Invalid command!"
	* When "process" command is exectuted NullReferenceException is thrown
	* System.Collections.Generic.dll with single class was referenced in out assembly
	* 

Single responsibility principle
	* 

Open/closed principle
	* 

Liskov substitution principle
	* 

Interface segregation principle
	* 

Dependency inversion principle
	* 
